}
return(re)
}
unifn(100,max=10)
?ceiling
## 2.1
fdiscunif_sample<-function(n=4){
ceiling(n*runif(1))
}
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
fdiscunif_sample()
12==4*4
## 2.1
fdiscunif_sample<-function(n=4){
ceiling(n*runif(1))
}
## 2.2
frobot_path<-function(m=4){
path_length<-0
robot_pos<-c(1,1)
while(!((robot_pos[1]==m) && (robot_pos[2]==m))){
if ((robot_pos[1]==1) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(2)
if (direction==1){
robot_pos<-c(1,2)
}else{
robot_pos<-c(2,1)
}
}else if((robot_pos[1]==1) && (robot_pos[2]==m)){
direction<-fdiscunif_sample(2);if (direction==1){robot_pos<-c(2,m)}else{robot_pos<-c(1,m-1)}
}else if ((robot_pos[1]==m) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(2)
if (direction==1){
robot_pos<-c(
)}
else{
robot_pos<-c(m-1,1)
}
}else if ((robot_pos[1]==m) && (robot_pos[2]==m)){print("Warning: we have reached a place in the loop that should not ever be reached!")
}else if ((robot_pos[1]==1) && (robot_pos[2]!=m)&&(robot_pos[2]!=1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(1,robot_pos[2]+1)};if (direction==2){robot_pos<-c(2,robot_pos[2])};if (direction==3){robot_pos<-c(1,robot_pos[2]-1)}
}else if ((robot_pos[1]==m) && (robot_pos[2]!=m)&&(robot_pos[2]!=1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(m,robot_pos[2]+1)};if (direction==2){robot_pos<-c(m-1,robot_pos[2])};if (direction==3){robot_pos<-c(m,robot_pos[2]-1)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(robot_pos[1]+1,1)};if (direction==2){robot_pos<-c(robot_pos[1],2)};if (direction==3){robot_pos<-c(robot_pos[1]-1,1)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]==m)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(robot_pos[1]+1,m)};if (direction==2){robot_pos<-c(robot_pos[1],m-1)};if (direction==3){robot_pos<-c(robot_pos[1]-1,m)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]!=m) && (robot_pos[2]!=1)){
direction<-fdiscunif_sample(4);if (direction==1){robot_pos<-c(robot_pos[1]+1,robot_pos[2])};if (direction==2){robot_pos<-c(robot_pos[1]-1,robot_pos[2])};if (direction==3){robot_pos<-c(robot_pos[1],robot_pos[2]+1)};if (direction==4){robot_pos<-c(robot_pos[1],robot_pos[2]-1)}
}
path_length<-path_length+1
}
path_length
}
N<-1000
vTm8<-sapply(1:N,function(i,m){frobot_path(m)},m=8,simplify=TRUE)
## 2.1
fdiscunif_sample<-function(n=4){
ceiling(n*runif(1))
}
## 2.2
frobot_path<-function(m=4){
path_length<-0
robot_pos<-c(1,1)
while(!((robot_pos[1]==m) && (robot_pos[2]==m))){
if ((robot_pos[1]==1) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(2)
if (direction==1){
robot_pos<-c(1,2)
}else{
robot_pos<-c(2,1)
}
}else if((robot_pos[1]==1) && (robot_pos[2]==m)){
direction<-fdiscunif_sample(2);if (direction==1){robot_pos<-c(2,m)}else{robot_pos<-c(1,m-1)}
}else if ((robot_pos[1]==m) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(2);if (direction==1){robot_pos<-c(m,2)}else{robot_pos<-c(m-1,1)}
}else if ((robot_pos[1]==m) && (robot_pos[2]==m)){print("Warning: we have reached a place in the loop that should not ever be reached!")
}else if ((robot_pos[1]==1) && (robot_pos[2]!=m)&&(robot_pos[2]!=1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(1,robot_pos[2]+1)};if (direction==2){robot_pos<-c(2,robot_pos[2])};if (direction==3){robot_pos<-c(1,robot_pos[2]-1)}
}else if ((robot_pos[1]==m) && (robot_pos[2]!=m)&&(robot_pos[2]!=1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(m,robot_pos[2]+1)};if (direction==2){robot_pos<-c(m-1,robot_pos[2])};if (direction==3){robot_pos<-c(m,robot_pos[2]-1)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]==1)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(robot_pos[1]+1,1)};if (direction==2){robot_pos<-c(robot_pos[1],2)};if (direction==3){robot_pos<-c(robot_pos[1]-1,1)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]==m)){
direction<-fdiscunif_sample(3);if (direction==1){robot_pos<-c(robot_pos[1]+1,m)};if (direction==2){robot_pos<-c(robot_pos[1],m-1)};if (direction==3){robot_pos<-c(robot_pos[1]-1,m)}
}else if ((robot_pos[1]!=1)&&(robot_pos[1]!=m) && (robot_pos[2]!=m) && (robot_pos[2]!=1)){
direction<-fdiscunif_sample(4);if (direction==1){robot_pos<-c(robot_pos[1]+1,robot_pos[2])};if (direction==2){robot_pos<-c(robot_pos[1]-1,robot_pos[2])};if (direction==3){robot_pos<-c(robot_pos[1],robot_pos[2]+1)};if (direction==4){robot_pos<-c(robot_pos[1],robot_pos[2]-1)}
}
path_length<-path_length+1
}
path_length
}
N<-1000
vTm8<-sapply(1:N,function(i,m){frobot_path(m)},m=8,simplify=TRUE)
vTm8
pT8<-sum(vTm8==4*8)/N
## Q 2.3
library(boot)
get_boot_mean<-function(x,vi){mean(x[vi],na.rm=TRUE)}
ET8<-mean(vTm8)
ciET8<-boot.ci(boot(vTm8,get_boot_mean,R=1000))
ciET8
plot(ciET8)
plot(ciET8,index=1)
## Q 2.3
library(boot)
plot(ciET8,index=1)
plot(ciET8$t0,index=1)
summary(ciET8)
ciET8
?boot.ci
boot(vTm4,get_boot_mean,R=1000)
boot(vTm8,get_boot_mean,R=1000)
boot(vTm8,get_boot_mean,R=1000)->a
plot(a)
rm(list=ls())
rm(list=ls())
pdf_f = function(x,a,b){
(b^a*x^(a-1)*exp(-b*x))/gamma(a)
}
pdf_g = function(x,lda){
lda*exp(-lda*x)
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}Y
<- data1[i,2]
u <- runif(1)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}Y
<- data1[i,2]
u <- runif(1)
g <- pdf_g(Y)
f <- pdf_f(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
rm(list=ls())
pdf_f = function(x,a,b){
(b^a*x^(a-1)*exp(-b*x))/gamma(a)
}
pdf_g = function(x,lda){
lda*exp(-lda*x)
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
gamma(2)
gamma(2)
gamma(2)
?gamma
data1 <- rgamma(10000)
?rgamma
data1 <- rgamma(10000,1)
data()
data1
hist(data1)
hist(rgamma(10000,5))
rm(list=ls())
pdf_f = function(x,a,b){
(b^a*x^(a-1)*exp(-b*x))/gamma(a)
}
pdf_g = function(x,lda){
lda*exp(-lda*x)
}
data1 <- rgamma(10000,1)
c <- pdf_f(4,2,2)/pdf_g(4,1)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
Y <- data1[i,2]
u <- runif(1)
g <- pdf_g(Y)
f <- pdf_f(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
n <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
Y <- data1[i,2]
u <- runif(1)
g <- pdf_g(Y)
f <- pdf_f(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
Y <- data1[i]
u <- runif(1)
g <- pdf_g(Y)
f <- pdf_f(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
Y <- data1[i]
u <- runif(1)
g <- pdf_g(Y,1)
f <- pdf_f(Y,2,2)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
hist(accept)
exp(0)
plot(-3:10,exp(-3:10))
f<- function(x){
4*x*exp(-x)
}
plot(-3:10,f(-3:10))
plot(-10:10,f(-10:10))
?sqrt
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*1/(y-1)^(1/a)
return(result)
}
laplace_distribution(3,1,data1)
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*1/(p-1)^(1/a)
return(result)
}
laplace_distribution(3,1,data1)
data1
data1[1]
data1[,1]
dim(data1)
data1[1,]
a=3
b
b=1
(p-1)^(1/a)
p=data1[1,]
(p-1)^(1/a)
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*((p-1)^(-1/a))
return(result)
}
laplace_distribution(3,1,data1)
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*((1-p)^(-1/a))
return(result)
}
laplace_distribution(3,1,data1)
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*((1-p)^(-1/a))
return(result)
}
a=laplace_distribution(3,1,data1)
hist(a)
hist(x=a)
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
# the inverse laplace with mu = 0.5
laplace_distribution = function(a, b, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- b*((1-p)^(-1/a))
return(result)
}
a=laplace_distribution(3,1,data1)
a
hist(a)
class(a)
hist(a[,1])
?optim
rm(list=ls())
# set.seed(12345)
f <- function(n){
es = c()
for (i in 1:n) {
# browser()
theta = runif(1,0,2*pi)
D = runif(1)
X_1 = sqrt(-2* log(D))*cos(theta)    # ln(x)
X_2 = sqrt(-2* log(D))*sin(theta)    # epsilon
x = exp(X_1)
y = exp(0.5+1.5*X_1+X_2)
es[i] = y/x
}
c(mean(es),var(es))
}
x=seq(100,20000,100)
y=sapply(x, f)
z=rep(exp(9/8),length(x))
dt = data.frame(x,y=y[1,],z) # mean
dt = data.frame(x,y=y[2,],z) # var
ggplot(dt,aes(x=x,y=y))+
geom_line()+
geom_line(aes(x=x,y=z))+
geom_smooth()
library(ggplot2)
z=rep(exp(9/8),length(x))
dt = data.frame(x,y=y[1,],z) # mean
dt = data.frame(x,y=y[2,],z) # var
ggplot(dt,aes(x=x,y=y))+
geom_line()+
geom_line(aes(x=x,y=z))+
geom_smooth()
ggplot(dt,aes(x=x,y=y))+
geom_line()+
geom_line(aes(x=x,y=z))
ggplot(dt,aes(x=x,y=y))+
geom_line()
ggplot(dt,aes(x=x,y=z))+
geom_line()+
geom_line(aes(x=x,y=z))
dt
ggplot(dt,aes(x=x,y=y))+
geom_line()+
geom_line(aes(x=x,y=z))+
geom_smooth()
dt = data.frame(x,y=y[1,],z) # mean
dt
rm(dt)
dt = data.frame(x,y=y[1,],z) # mean
dt
ggplot(dt,aes(x=x,y=y))+
geom_line()+
geom_smooth()
3%%2
3%%3
rand <- function(nmax,x0,a,m){
re = c()
x=x0
for (i in 1:nmax) {
temp = (a*x)%%m
x = temp
re[i] = remp/m
}
re
}
rand(1000, a=69069, m=2**32, x0=1)
rand <- function(nmax,x0,a,m){
re = c()
x=x0
for (i in 1:nmax) {
temp = (a*x)%%m
x = temp
re[i] = temp/m
}
re
}
rand(1000, a=69069, m=2**32, x0=1)
re=rand(1000, a=69069, m=2**32, x0=1)
hist(re)
?optim
rm(list=ls())
fn = function(as, init_val, f_target){
fhat = function(x){
as[1]+as[2]*x+a[3]*x**2
}
(fhat(xs[1])-f_target(xs[1]))**2+(fhat(xs[2])-f_target(xs[2]))**2+(fhat(xs[3])-f_target(xs[3]))**2
}
f_target = function(x){
-x*(1-x)
}
optim(fn=fn, init_val=c(0.1, 0.5, 0.9), f_target=f_target)
optim(fn=fn, par=c(0.1, 0.5, 0.9),
init_val=c(0.1, 0.5, 0.9),
f_target=f_target)
fn = function(as, xs, f_target){
fhat = function(x){
as[1]+as[2]*x+a[3]*x**2
}
(fhat(xs[1])-f_target(xs[1]))**2+(fhat(xs[2])-f_target(xs[2]))**2+(fhat(xs[3])-f_target(xs[3]))**2
}
f_target = function(x){
-x*(1-x)
}
optim(fn=fn, par=c(0.1, 0.5, 0.9),
xs=c(0.1, 0.5, 0.9),
f_target=f_target)
fn = function(as, xs, f_target){
fhat = function(x){
as[1]+as[2]*x+as[3]*x**2
}
(fhat(xs[1])-f_target(xs[1]))**2+(fhat(xs[2])-f_target(xs[2]))**2+(fhat(xs[3])-f_target(xs[3]))**2
}
f_target = function(x){
-x*(1-x)
}
optim(fn=fn, par=c(0.1, 0.5, 0.9),
xs=c(0.1, 0.5, 0.9),
f_target=f_target)
i = seq(0,1,0.01)
plot(i,f_target(i))
fhat = function(x){
as[1]+as[2]*x+as[3]*x**2
}
fn = function(as, xs, f_target){
(fhat(xs[1])-f_target(xs[1]))**2+(fhat(xs[2])-f_target(xs[2]))**2+(fhat(xs[3])-f_target(xs[3]))**2
}
f_target = function(x){
-x*(1-x)
}
pred = function(as,x){
as[1]+as[2]*x+as[3]*x**2
}
re = optim(fn=fn, par=c(0.1, 0.5, 0.9),
xs=c(0.1, 0.5, 0.9),
f_target=f_target)
rm(list=ls())
fn = function(as, xs, f_target){
fhat = function(x){
as[1]+as[2]*x+as[3]*x**2
}
(fhat(xs[1])-f_target(xs[1]))**2+(fhat(xs[2])-f_target(xs[2]))**2+(fhat(xs[3])-f_target(xs[3]))**2
}
f_target = function(x){
-x*(1-x)
}
pred = function(as,x){
as[1]+as[2]*x+as[3]*x**2
}
re = optim(fn=fn, par=c(0.1, 0.5, 0.9),
xs=c(0.1, 0.5, 0.9),
f_target=f_target)
i = seq(0,1,0.01)
plot(i,f_target(i))
plot(i,pred(re$par,i))
f_target = function(x){
# -x*(1-x)
-x*sin(10*pi*x)
}
pred = function(as,x){
as[1]+as[2]*x+as[3]*x**2
}
re = optim(fn=fn, par=c(0.1, 0.5, 0.9),
xs=c(0.1, 0.5, 0.9),
f_target=f_target)
i = seq(0,1,0.01)
plot(i,f_target(i))
plot(i,pred(re$par,i))
