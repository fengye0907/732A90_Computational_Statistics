rm(list=ls())
Sys.setlocale(locale = "english")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# import the data
data = read.csv2("mortality_rate.csv")
# the LMR - natural logarithm of Rate
data$LMR = log(data$Rate)
# split the data into train and test set
n=dim(data)[1]
set.seed(123456)
id=sample(1:n, floor(n*0.5))
train=data[id,]
test=data[-id,]
ï¼Ÿloess
?loess
?optimize
?loess
?optim
# split the data into train and test set
n=dim(data)[1]
set.seed(123456)
id=sample(1:n, floor(n*0.5))
train=data[id,]
test=data[-id,]
# the myMSE() function
# input of the function- parameter lambda & list(vector(X, Y, Xtest, Ytest)) pars
# list(vector(X, Y, Xtest, Ytest)) pars
input_vector = list(X = train$Day, Y = train$LMR , Xtest = test$Day, Ytest = test$LMR)
# create an empty counter
counter = 0
myMSE = function(lambda,pars){
# create the model
model = loess(formula = pars$Y ~ pars$X,
enp.target = lambda)# just use enp.target or
#,span = 0.75) # default - smoothing parameter
#make the prediction
pred <- predict(object = model,
newdata = pars$Xtest)
# calculate the mse
predictiveMSE = (1/length(pars$Ytest)) * sum((pars$Ytest - pred)^2)
#print and return the result
counter <<- counter + 1
#print(predictiveMSE)
return(predictiveMSE)
}
# initialize lambdas
lambdas = seq(from = 0.1, to = 40, by = 0.1)
# use the function myMSE - for all lambda values
mse_result = c()
for (i in 1:length(lambdas)) {
mse_result[i] = myMSE(lambdas[i], input_vector)
}
# the min mse value
mse_min = min(mse_result)
# the lamnda index of the min vlaue
mse_min_index = which.min(mse_result)
# the min lambda value
lambda_optimal = lambdas[mse_min_index]
# create the plot of the MSE values
# data frame for the plot
mse_plot_data = data.frame(mse_values = mse_result,
lamda_values = lambdas)
mse_plot = ggplot(mse_plot_data, aes(x = lamda_values, y = mse_values)) +
geom_line(color = "red") +
ggtitle("MSE vs lambda - 1.4") +
geom_vline(xintercept = lambda_optimal, color = "blue", size = 0.5) +
xlab("lambda") + ylab("MSE")
rm(list=ls())
Sys.setlocale(locale = "english")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# list packages we use in this lab
library(ggplot2)
#install.packages("gridExtra") # to put the plots togeter
library(gridExtra)
# import the data
data = read.csv2("mortality_rate.csv")
# the LMR - natural logarithm of Rate
data$LMR = log(data$Rate)
# split the data into train and test set
n=dim(data)[1]
set.seed(123456)
id=sample(1:n, floor(n*0.5))
train=data[id,]
test=data[-id,]
# the myMSE() function
# input of the function- parameter lambda & list(vector(X, Y, Xtest, Ytest)) pars
# list(vector(X, Y, Xtest, Ytest)) pars
input_vector = list(X = train$Day, Y = train$LMR , Xtest = test$Day, Ytest = test$LMR)
# create an empty counter
counter = 0
myMSE = function(lambda,pars){
# create the model
model = loess(formula = pars$Y ~ pars$X,
enp.target = lambda)# just use enp.target or
#,span = 0.75) # default - smoothing parameter
#make the prediction
pred <- predict(object = model,
newdata = pars$Xtest)
# calculate the mse
predictiveMSE = (1/length(pars$Ytest)) * sum((pars$Ytest - pred)^2)
#print and return the result
counter <<- counter + 1
#print(predictiveMSE)
return(predictiveMSE)
}
# initialize lambdas
lambdas = seq(from = 0.1, to = 40, by = 0.1)
# use the function myMSE - for all lambda values
mse_result = c()
for (i in 1:length(lambdas)) {
mse_result[i] = myMSE(lambdas[i], input_vector)
}
# the min mse value
mse_min = min(mse_result)
# the lamnda index of the min vlaue
mse_min_index = which.min(mse_result)
# the min lambda value
lambda_optimal = lambdas[mse_min_index]
# create the plot of the MSE values
# data frame for the plot
mse_plot_data = data.frame(mse_values = mse_result,
lamda_values = lambdas)
mse_plot = ggplot(mse_plot_data, aes(x = lamda_values, y = mse_values)) +
geom_line(color = "red") +
ggtitle("MSE vs lambda - 1.4") +
geom_vline(xintercept = lambda_optimal, color = "blue", size = 0.5) +
xlab("lambda") + ylab("MSE")
mse_plot
#create data frame with result values
result14 = data.frame(
"Minumium MSE"=mse_min,
"Optimal lambda"=lambda_optimal,
"Iter. of myMSE"=counter)
# set the counter to 0
counter = 0
opti = optimize(f = myMSE,
interval = c(0.1,40),
pars = input_vector, # specify the input for the function  pars
tol = 0.01) # dedired accuracy
#create data frame with result values
result15 = data.frame(
"Minumium MSE"=opti$objective,
"Optimal lambda"=opti$minimum,
"Iter. of myMSE"=counter)
mse_plot2 = ggplot(mse_plot_data, aes(x = lamda_values, y = mse_values)) +
geom_line(color = "red") +
ggtitle("MSE vs lambda - 1.5 ") +
geom_vline(xintercept = opti$minimum, color = "green", size = 0.5) +
xlab("lambda") + ylab("MSE")
#?optim()
opti2 = optim(par = 35,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 35,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 10,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 0,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 5,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 20,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
5opti2
opti2
#create data frame with result values
result16 = data.frame(
"Minumium MSE"=opti2$value,
"Optimal lambda"=opti2$par,
"Iter. of myMSE"=opti2$counts[1])
# create a table for the result for 1.4, 1.5, 1.6
result1 = rbind(result14,result15,result16)
rowname = c("Result 1.4", "Result 1.5", "Result 1.6")
rownames(result1) = rowname
knitr::kable(result1)
mse_plot3 = ggplot(mse_plot_data, aes(x = lamda_values, y = mse_values)) +
geom_line(color = "red") +
ggtitle("MSE vs lambda - range 35 to 40 - 1.6") +
geom_vline(xintercept = opti2$par, color = "red", size = 0.5) +
xlab("lambda") + ylab("MSE")
grid.arrange(mse_plot, mse_plot2, mse_plot3, nrow = 3)
#?optim()
counter = 0
opti2 = optim(par = 10,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 10,
fn = myMSE,
method = "BFGS",
pars= input_vector)
#?optim()
counter = 0
opti2 = optim(par = 10,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 15,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2$
#?optim()
counter = 0
opti2 = optim(par = 15,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 35,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 3,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 10,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
opti2 = optim(par = 4,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(1)
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(10)
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(21231241)
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(21231241)
opti2 = optim(par = 2,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(21231241)
opti2 = optim(par = 3,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
#?optim()
counter = 0
set.seed(21231241)
opti2 = optim(par = 1,
fn = myMSE,
method = "BFGS",
pars= input_vector)
opti2
