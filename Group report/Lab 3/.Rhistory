rmutil::rlaplace()
rmutil::rlaplace()
data1
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
u <- data1[i,1]
Y <- data1[i,2]
# u <- runif(1)
# Y <- rmutil::rlaplace()
# Y <- laplace_distribution(0,1,1)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
# if(Y<(-2)||Y>2||Y==0){
#   next()
# }
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
# u <- data1[i,1]
# Y <- data1[i,2]
u <- runif(1)
Y <- rmutil::rlaplace()
# Y <- laplace_distribution(0,1,1)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
# if(Y<(-2)||Y>2||Y==0){
#   next()
# }
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
Y <- rmutil::rlaplace(n=10000)
mean(Y)
mean(laplace_distribution(0,1,x_rand))
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
# u <- data1[i,1]
# Y <- data1[i,2]
u <- runif(1)
# Y <- rmutil::rlaplace(n=10000)
Y <- laplace_distribution(0,1,u)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
# if(Y<(-2)||Y>2||Y==0){
#   next()
# }
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
# u <- data1[i,1]
Y <- data1[i,2]
u <- runif(1)
# Y <- laplace_distribution(0,1,u)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
# if(Y<(-2)||Y>2||Y==0){
#   next()
# }
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# libraries used
rm(list=ls())
library(ggplot2)
#install.packages("gridExtra") # to put the plots togeter
library(gridExtra)
# set working directory
# load the data
data = read.csv2("population.csv")
data[,1] <- as.character(data[,1])
# create the select city function - based on max
selectCity = function(data){
# proportional to the number of inhabitants of the city
data$proportinalPopulation = data$Population/sum(data$Population)
# generate random numbers - include to dataset
data$rn_uniform = runif(n=nrow(data),0,1)
# probabilities proportional to the number of inhabitants
data$prob_proportinalPopulation = data$proportinalPopulation * data$rn_uniform
# take one city - max prob_proportinalPopulation
city_index = which.max(data$prob_proportinalPopulation)
# print(data[city_index,][1]) # make the print nicer
return(data[city_index,1])
}
# create a function to select 20 cities
select20cities = function(data){
cities_remain <- data
selected_cities <- c()
for (i in 1:20) {
selected_city <- selectCity(cities_remain)
selected_cities <- c(selected_cities,selected_city)
cities_remain <- cities_remain[-which(cities_remain[,1]==selected_city),]
}
return(data.frame(Municipality=selected_cities))
}
# list of all selected cities
selected_cities <- select20cities(data)
idx <- match(selected_cities$Municipality, data[,1])
selected_cities$Population <- data[idx,2]
selected_cities <- selected_cities[order(selected_cities[,2],decreasing = TRUE),]
rownames(selected_cities) <- c()
selected_cities
# histogram - 2 selected cities
histplot_20cities = ggplot(selected_cities)+
geom_histogram(binwidth=10000,aes(x=Population)) +
ggtitle("Size of the 20 selected cities") +
scale_x_continuous(labels = scales::comma)
histplot_cities = ggplot(data)+
geom_histogram(binwidth=10000,aes(x=Population)) +
ggtitle("Size of all cities in Sweden")+
scale_x_continuous(labels = scales::comma)
# put the plots together
grid.arrange(histplot_20cities, histplot_cities, ncol = 2)
# put the plots together
grid.arrange(histplot_20cities, histplot_cities, ncol = 1)
# generate random numbers
rm(list=ls())
n=10000
set.seed(10)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
ggplot(data1,aes(x=unif))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# generate random numbers
rm(list=ls())
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
ggplot(data1,aes(x=unif))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
laplace_distribution = function(mu, alpha, p){
result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
ggplot(data = data1, aes(x=lap)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
# u <- data1[i,1]
Y <- data1[i,2]
u <- runif(1)
# Y <- laplace_distribution(0,1,u)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
# if(Y<(-2)||Y>2||Y==0){
#   next()
# }
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
# u <- data1[i,1]
Y <- data1[i,2]
u <- runif(1)
# Y <- laplace_distribution(0,1,u)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
if(Y<(-2)||Y>2||Y==0){
next()
}
if(u<=f/(c*g)){
# if(u>0.5){
#   Y <- -Y
# }
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
pdf_norm = function(x){
exp(-(x**2)/2)/(sqrt(2*pi))
}
pdf_lap = function(x){
(1/2)*exp(-abs(x))
}
c <- sqrt(2/pi)*exp(0.5)
n2 <- 2000
accept <- c()
for (i in 1:n) {
if(length(accept)>=n2){
break()
}
Y <- data1[i,2]
u <- runif(1)
g <- pdf_lap(Y)
f <- pdf_norm(Y)
if(u<=f/(c*g)){
accept <- c(accept,Y)
}
}
data2 <- data.frame(val=accept, id="esti")
reject_rate <- 1-n2/i
reject_rate
1-1/c
ggplot(data = data2, aes(x=val)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
knitr::kable(selected_cities)
# libraries used
rm(list=ls())
library(ggplot2)
#install.packages("gridExtra") # to put the plots togeter
library(gridExtra)
# set working directory
# load the data
data = read.csv2("population.csv")
data[,1] <- as.character(data[,1])
# create the select city function - based on max
selectCity = function(data){
# proportional to the number of inhabitants of the city
data$proportinalPopulation = data$Population/sum(data$Population)
# generate random numbers - include to dataset
data$rn_uniform = runif(n=nrow(data),0,1)
# probabilities proportional to the number of inhabitants
data$prob_proportinalPopulation = data$proportinalPopulation * data$rn_uniform
# take one city - max prob_proportinalPopulation
city_index = which.max(data$prob_proportinalPopulation)
# print(data[city_index,][1]) # make the print nicer
return(data[city_index,1])
}
# create a function to select 20 cities
select20cities = function(data){
cities_remain <- data
selected_cities <- c()
for (i in 1:20) {
selected_city <- selectCity(cities_remain)
selected_cities <- c(selected_cities,selected_city)
cities_remain <- cities_remain[-which(cities_remain[,1]==selected_city),]
}
return(data.frame(Municipality=selected_cities))
}
# create a function to select 20 cities
select20cities = function(data){
cities_remain <- data
selected_cities <- c()
for (i in 1:20) {
selected_city <- selectCity(cities_remain)
selected_cities <- c(selected_cities,selected_city)
cities_remain <- cities_remain[-which(cities_remain[,1]==selected_city),]
}
return(data.frame(Municipality=selected_cities))
}
# list of all selected cities
selected_cities <- select20cities(data)
idx <- match(selected_cities$Municipality, data[,1])
selected_cities$Population <- data[idx,2]
selected_cities <- selected_cities[order(selected_cities[,2],decreasing = TRUE),]
rownames(selected_cities) <- c()
selected_cities
knitr::kable(selected_cities)
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
Sys.setlocale(locale="english")
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu--sgn(p-mu)*1/alpha*log(1+sgn(x-mu)-sgn(x-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
# generate random numbers
rm(list=ls())
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
ggplot(data1,aes(x=unif))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# libraries used
rm(list=ls())
library(ggplot2)
#install.packages("gridExtra") # to put the plots togeter
library(gridExtra)
# generate random numbers
rm(list=ls())
n=10000
set.seed(123456)
x_rand <- runif(n=n, min=0, max=1)
data1 <- data.frame(unif=x_rand)
ggplot(data1,aes(x=unif))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu--sgn(p-mu)*1/alpha*log(1+sgn(x-mu)-sgn(x-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu-sgn(p-mu)*1/alpha*log(1+sgn(x-mu)-sgn(x-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu-sign(p-mu)*1/alpha*log(1+sign(x-mu)-sign(x-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu-sign(p-mu)*1/alpha*log(1+sign(p-mu)-sign(x-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu-sign(p-mu)*1/alpha*log(1+sign(p-mu)-sign(p-mu)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
ggplot(data = data1, aes(x=lap)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
laplace_distribution = function(mu, alpha, p){
# result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
result <- mu-sign(p-0.5)*1/alpha*log(1+sign(p-0.5)-sign(p-0.5)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
ggplot(data = data1, aes(x=lap)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
laplace_distribution = function(mu, alpha, p){
result <- mu-(1/alpha)*sign(p-0.5)*log(1-2*abs(p-0.5))
# result <- mu-sign(p-0.5)*1/alpha*log(1+sign(p-0.5)-sign(p-0.5)*2*p)
return(result)
}
data1$lap <- laplace_distribution(0,1, x_rand)
ggplot(data = data1, aes(x=lap)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
